<?php
/*
 File: utility
 
 Version:
  2010.06.07
  
 Copyright:
  2004-2010 The State News, Inc
  
 Author:
  Mike Joseph <josephm5@msu.edu>
  
 License:
  GNU GPL 2.0 - http://opensource.org/licenses/gpl-2.0.php
*/
namespace foundry\auth;

/*
 Class: utility
  Provides authentication utility functions
 
 Namespace:
  \foundry\auth
*/
class utility {

	/*
	 Method: generateSalt
	  Generates a unique cryptographic salt
	  
	  > $salt = \foundry\auth\utility::generateSalt();
	  
	 Access:
	  public
	  
	 Parameters:
	  _void_
	  
	 Returns:
	  _string_
	*/
	public static function generateSalt() {
		$salt = uniqid( rand(), true );
		return substr( $salt, strpos( $salt, '.' ) + 1 );
	}
	
	/*
	 Method: generateKeyPair
	  Generates a unique cryptographic key pair to be used in key passing. This
	  method is great for generating keys to be passed in a session var and a
	  form to ensure that the form was not autosubmitted.
	  
	  > $keys = \foundry\auth\utility\generateKeyPar()
	  > $session->key = $keys['key'];
	  
	 Access:
	  public
	  
	 Parameters:
	  seed - _string_ (optional) a random seed
	  
	 Returns:
	  _array_ containing:
	  	- key - _string_ the original key
	  	- obfuscatedKey - _string_ an obfuscated version of the key
	 
	 See Also:
	   <checkKeyPair>
	*/
	public static function generateKeyPair($seed=false) {
		if( !$seed ) {
			$key = md5(time()+rand());
		} else {
			$key = md5(time().$seed);
		}
	
		// we flip the key and transpose the first and last
		// so 123456 becomes 154326
		$outKey = strrev($key);
		$first = $outKey{0};
		$last = $outKey{(strlen($outKey) -1)};
		
		$outKey{0} = $last;
		$outKey{(strlen($outKey) -1)} = $first;
		
		return array(
			'key'			=> $key,
			'obfuscatedKey' => $outKey
		);	
	}
	
	/*
	 Method: checkKeyPair
	  Check a key generated by generateKeyPair
	  
	  > $salt = \foundry\auth\utility::generateSalt();
	  
	 Access:
	  public
	  
	 Parameters:
	  key - _string_
	  key2 _ _string_
	  
	 Returns:
	  _bool_
	  
	 See Also:
	  <generateKeyPair>
	*/
	public static function checkKeyPair($key, $key2) {
		if( !$key || !$key2 ) {
			return false;
		}
		
		return ($key == self::keyFlip($key2));
	}
	
	/*
	 Method: keyFlip
	  Obfuscates a key
	 
	 Access:
	  public
	  
	 Parameters:
	  key - _string_
	 
	 Returns:
	  _string_
	  
	 See Also:
	  <generateKeyPair>, <checkKeyPair>
	*/
	public static function keyFlip($key) {
		$len = strlen($key);
		
		$first = $key{0};
		$last = $key{($len-1)};
		
		$key{0} = $last;
		$key{($len-1)} = $first;
	
		return strrev($key);
	}

	/*
	 Method: generateKeyName
	  Generate a key for a cookie
	
	Access:
	 public
	 
	Paramters:
	 prefix - _string_ (optional) a prefix string
	
	Returns:
	 _string_
	*/
	public static function generateKeyName($prefix='f6_') {
		return $prefix.hash('crc32',
			$_SERVER['SERVER_ADDR'].$_SERVER['SERVER_NAME']);
	}

}
?>